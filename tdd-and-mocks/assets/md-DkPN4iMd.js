import{b as r,o as u,w as i,g as l,C as e,v as s,x as c,B as a}from"./modules/vue-yEidkMur.js";import{I as d}from"./slidev/default-Bz38XMcD.js";import{u as m,f as p}from"./slidev/context-ui2L8od1.js";import"./index-UpKHkio-.js";import"./modules/shiki-DTuP-x8k.js";const k={__name:"how_to_use_in_c.md__slidev_25",setup(h){const{$clicksContext:o,$frontmatter:n}=m();return o.setup(),(_,t)=>(u(),r(d,s(c(a(p)(a(n),24))),{default:i(()=>t[0]||(t[0]=[l("h1",null,"What About Parameters?",-1),l("p",null,[l("code",null,"mock().expectOneCall(functionName).withParameter(name, value)")],-1),l("ul",null,[l("li",null,[e("When calling an expected or actual call just chain call and add parameters "),l("ul",null,[l("li",null,[l("code",null,".withParameter(...).withParameter(...).withParameter(...)")])])]),l("li",null,[e("Will work for all basic types "),l("ul",null,[l("li",null,[l("code",null,"int"),e(", "),l("code",null,"uint8_t"),e(", "),l("code",null,"double"),e(", "),l("code",null,"const char*"),e(" or "),l("code",null,"void*")]),l("li",null,"C++ magic takes care of this")])]),l("li",null,[e("What about "),l("code",null,"withBoolParameter"),e(" or "),l("code",null,"withXParameter"),e("? "),l("ul",null,[l("li",null,[l("code",null,"withParameter"),e(" will always use the appropriate type so no need to use")])])]),l("li",null,[e("What about other types? "),l("ul",null,[l("li",null,"See appendix")])])],-1)])),_:1,__:[0]},16))}};export{k as default};
